{"mappings":"AAAA,MAAM,QAAQ;IACZ,SAAS,EAAE;IACX,gBAAgB;IAChB,aAAa;AACf;AAEA,MAAM,eAAe,eAAgB,KAAK;IACxC,IAAI;QACF,MAAM,MAAM,MAAM,MAAM,CAAC,wDAAwD,EAAE,OAAO;QAC1F,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,OAAO,KAAK,IAAI,CAAC,OAAO;IAC1B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,oBAAoB;IACpC;AACF;AAEA,MAAM,mBAAmB,SAAU,OAAO,MAAM,WAAW;IACzD,MAAM,WAAW,GAAG;IACpB,MAAM,QAAQ,AAAC,CAAA,OAAO,CAAA,IAAK,MAAM,cAAc;IAC/C,MAAM,MAAM,OAAO,MAAM,cAAc;IACvC,OAAO,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO;AACpC;AAEA,MAAM,gBAAgB,SAAU,OAAO;IACrC,MAAM,YAAY,SAAS,aAAa,CAAC;IACzC,UAAU,SAAS,GAAG;IACtB,QAAQ,OAAO,CAAC,CAAA;QACd,MAAM,OAAO,CAAC;;YAEN,EAAE,OAAO,KAAK,CAAC;kBACT,EAAE,OAAO,SAAS,CAAC,OAAO,EAAE,OAAO,KAAK,CAAC;;IAEvD,CAAC;QACD,UAAU,kBAAkB,CAAC,aAAa;IAC5C;AACF;AAEA,MAAM,0BAA0B;IAC9B,MAAM,UAAU,SAAS,aAAa,CAAC;IACvC,MAAM,UAAU,SAAS,aAAa,CAAC;IACvC,MAAM,aAAa,KAAK,IAAI,CAAC,MAAM,OAAO,CAAC,MAAM,GAAG,MAAM,cAAc;IAExE,uBAAuB;IACvB,QAAQ,aAAa,CAAC,QAAQ,WAAW,GAAG,CAAC,KAAK,EAAE,MAAM,WAAW,GAAG,GAAG;IAC3E,QAAQ,aAAa,CAAC,QAAQ,WAAW,GAAG,CAAC,KAAK,EAAE,MAAM,WAAW,GAAG,GAAG;IAE3E,0CAA0C;IAC1C,QAAQ,SAAS,CAAC,MAAM,CAAC,UAAU,MAAM,WAAW,KAAK;IACzD,QAAQ,SAAS,CAAC,MAAM,CAAC,UAAU,MAAM,WAAW,KAAK;AAC3D;AAEA,MAAM,wBAAwB;IAC5B,SAAS,aAAa,CAAC,eAAe,gBAAgB,CAAC,SAAS,SAAU,CAAC;QACzE,MAAM,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC;QAC9B,MAAM,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC;QAC9B,MAAM,aAAa,KAAK,IAAI,CAAC,MAAM,OAAO,CAAC,MAAM,GAAG,MAAM,cAAc;QAExE,IAAI,QAAQ,MAAM,WAAW,GAAG,GAC9B,MAAM,WAAW;aACZ,IAAI,QAAQ,MAAM,WAAW,GAAG,YACrC,MAAM,WAAW;aAEjB;QAGF,cAAc;QACd;IACF;AACF;AAEA,MAAM,OAAO;IACX,MAAM,aAAa,MAAM,aAAa;IACtC,MAAM,OAAO,GAAG;IAEhB,cAAc,iBAAiB;IAC/B;IACA;AACF;AAEA","sources":["script/js.js"],"sourcesContent":["const state = {\r\n  recipes: [],\r\n  resultsPerPage: 10,\r\n  currentPage: 1,\r\n};\r\n\r\nconst fetchRecipes = async function (query) {\r\n  try {\r\n    const res = await fetch(`https://forkify-api.herokuapp.com/api/v2/recipes?search=${query}`);\r\n    const data = await res.json();\r\n    return data.data.recipes;\r\n  } catch (err) {\r\n    console.error('Failed to fetch:', err);\r\n  }\r\n};\r\n\r\nconst getRecipesByPage = function (page = state.currentPage) {\r\n  state.currentPage = page;\r\n  const start = (page - 1) * state.resultsPerPage;\r\n  const end = page * state.resultsPerPage;\r\n  return state.recipes.slice(start, end);\r\n};\r\n\r\nconst renderRecipes = function (recipes) {\r\n  const container = document.querySelector('.recipes-container');\r\n  container.innerHTML = '';\r\n  recipes.forEach(recipe => {\r\n    const html = `\r\n      <div class=\"recipe\">\r\n        <h3>${recipe.title}</h3>\r\n        <img src=\"${recipe.image_url}\" alt=\"${recipe.title}\" />\r\n      </div>\r\n    `;\r\n    container.insertAdjacentHTML('beforeend', html);\r\n  });\r\n};\r\n\r\nconst updatePaginationButtons = function () {\r\n  const prevBtn = document.querySelector('.pagination__btn--prev');\r\n  const nextBtn = document.querySelector('.pagination__btn--next');\r\n  const totalPages = Math.ceil(state.recipes.length / state.resultsPerPage);\r\n\r\n  // Update button labels\r\n  prevBtn.querySelector('span').textContent = `Page ${state.currentPage - 1}`;\r\n  nextBtn.querySelector('span').textContent = `Page ${state.currentPage + 1}`;\r\n\r\n  // Show/Hide buttons based on current page\r\n  prevBtn.classList.toggle('hidden', state.currentPage === 1);\r\n  nextBtn.classList.toggle('hidden', state.currentPage === totalPages);\r\n};\r\n\r\nconst handlePaginationClick = function () {\r\n  document.querySelector('.pagination').addEventListener('click', function (e) {\r\n    const prev = e.target.closest('.pagination__btn--prev');\r\n    const next = e.target.closest('.pagination__btn--next');\r\n    const totalPages = Math.ceil(state.recipes.length / state.resultsPerPage);\r\n\r\n    if (prev && state.currentPage > 1) {\r\n      state.currentPage--;\r\n    } else if (next && state.currentPage < totalPages) {\r\n      state.currentPage++;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    renderRecipes(getRecipesByPage());\r\n    updatePaginationButtons();\r\n  });\r\n};\r\n\r\nconst init = async function () {\r\n  const allRecipes = await fetchRecipes('pizza');\r\n  state.recipes = allRecipes;\r\n\r\n  renderRecipes(getRecipesByPage(1));\r\n  updatePaginationButtons();\r\n  handlePaginationClick();\r\n};\r\n\r\ninit();\r\n"],"names":[],"version":3,"file":"js-final.9733416a.js.map","sourceRoot":"/__parcel_source_root/"}